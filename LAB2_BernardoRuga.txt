Bernardo Costa Ruga � 1511651


QUEST�O 1)
-----------------------------------------------------
Exerc1.C

#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>

	
int main (int argc, char *argv[]){

	int segmento,segmento2, segmento3, status, i;
	//aloca mem compart.
	segmento = shmget(IPC_PRIVATE, 9*sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	segmento2 = shmget(IPC_PRIVATE, 9*sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	segmento3 = shmget(IPC_PRIVATE, 9*sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	//associa mem ao processo

	int *m1;
	int *m2;
	int *m3;.

	m1 = (int *) shmat(segmento, 0, 0);
	m2 = (int *) shmat(segmento2, 0, 0);
	m3 = (int *) shmat(segmento3, 0, 0);

	if (m1 == NULL || m2 == NULL || m3 == NULL){
		puts("Erro na associacao de mem");
		exit(-2);
	}
	int n;
	for (n = 0; n<9; n++){
		m1[n] = n + 1;
		m2[n] = 1;
	}

	int id;
	if((id = fork()) < 0){
		puts("Erro no fork");
		exit(-2);
	}
	else if (id == 0){
		//filho
		i = 0;
		while(i<3){
			m3[i] = m1[i] + m2[i];
			i++;
		}
		exit(-1);
	}
	else{
		//pai
		int id2;
		if((id2 = fork()) < 0){
			puts("Erro no fork");
			exit(-2);
		}
		else if (id2 == 0){
			//filho2
			i = 3;
			while(i<6){
				m3[i] = m1[i] + m2[i];
				i++;
			}
			exit(-1);
		}
		else{
			//pai2
			int id3;
			if((id3 = fork()) < 0){
				puts("Erro no fork");
				exit(-2);
			}
			else if (id3 == 0){
				//filho3
				int i = 6;
				while (i<9){
					m3[i] = m1[i] + m2[i];
					i++;
				}
				exit(-1);
			}
			else{
				//pai3
				waitpid(-1, &status, 0);
			}
			waitpid(-1, &status, 0);
		}
		waitpid(-1, &status, 0);
		
	}
	for(i = 0; i<9; i++){
		printf("m3[%d] = %d - pid = %d\n", i, m3[i], getpid());
	}
	shmdt(m1);
	shmdt(m2);
	shmdt(m3);
	shmctl(segmento, IPC_RMID, 0);
	shmctl(segmento2, IPC_RMID, 0);
	shmctl(segmento3, IPC_RMID, 0);
}

-----------------------------------------------------
COMPILACAO E EXECUCAO
$ gcc Exerc1.c -o ex
$ ./ex
-----------------------------------------------------
RESULTADO

m3[0] = 2 - pid = 4606
m3[1] = 3 - pid = 4606
m3[2] = 4 - pid = 4606
m3[3] = 5 - pid = 4606
m3[4] = 6 - pid = 4606
m3[5] = 7 - pid = 4606
m3[6] = 8 - pid = 4606
m3[7] = 9 - pid = 4606
m3[8] = 10 - pid = 4606

-----------------------------------------------------
CONCLUSAO
Neste exercicio percebesse bem como se pode utilizar diferentes shared memory em varios processos diferentes.
No caso, utilizamos 3 shared memories, uma para cada matriz, nos outros processos conseguimos utilizar cada uma
para fazer a soma. Cada processo acessava as 3 e utilizava as 3 matrizes la presentes. No final, a matriz que estava
vazia, retornou a a soma de m1 e m2 como era esperado.

-----------------------------------------------------


QUESTAO 2)

-----------------------------------------------------
Exerc2.C
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>

	
int main (void){

	int segmento;
	char *msg;

	segmento = shmget(8752, 100*sizeof(char), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	msg = (char *) shmat(segmento, 0, 0);

	if(msg == NULL){
		puts("Erro na alocacao");
		exit(-2);
	}

	printf("Digite a mensagem do dia!\n");
	scanf("%[^\n]", msg);

	shmdt(msg);

	return 0;
}

Msg.c
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>

int main (void){

	int segmento;
	char *msg;

	segmento = shmget(8752, 100*sizeof(char), IPC_CREAT | S_IRUSR | S_IWUSR);
	msg = (char *) shmat(segmento, 0, 0);

	printf("Messagem do dia: %s\n", msg);

	shmdt(msg);
	shmctl(segmento, IPC_RMID, 0);
	
	return 0;
}
-----------------------------------------------------
COMPILACAO E EXECUCAO
$ gcc Exerc2.c -o ex
$ ./ex
$Esta eh a mensagem do dia!
$gcc msg.c -o ex
$./ex
-----------------------------------------------------
RESULTADO
Messagem do dia: Esta eh a mensagem do dia!
-----------------------------------------------------
CONCLUSAO
Neste programa notasse como a memoria compartilhada fica no sistema ate que a deletemos e podemos fazer uso dela
em qualquer outro processo. Neste por exemplo, pusemos na memoria a mensagem e depois em outro processo fomos na
mesma memoria e pegamos o que tinhamos escrito la e imprimimos na tela.
-----------------------------------------------------

QUESTAO 3)

-----------------------------------------------------
Exerc3.C
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>

	
int main (void){
	int segmento, i;
	int *vetor;

	segmento = shmget(IPC_PRIVATE, 6*sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	vetor = (int *) shmat(segmento, 0, 0);

	vetor[0] = 1; vetor[1] = 4; vetor[2] = 2; vetor[3] = 0; vetor[4] = 9; vetor[5] = 2;
	
	int id;
	if((id = fork()) < 0){
		puts("Erro no fork");
		exit(-2);
	}
	else if (id == 0){
		//filho
		
		i = 0;
		while(i<3){
			if(vetor[i] == 2)
				printf("O 2 se encontra na posicao %d\n", i);
			i++;
		}
		exit(-1);
	}
	else{
		//pai
		int id2;
		if((id2 = fork()) < 0){
			puts("Erro no fork");
			exit(-2);
		}
		else if (id2 == 0){
			//filho2
			i=3;
			while(i<6){
				if(vetor[i] == 2)
					printf("O 2 se encontra na posicao %d\n", i);
				i++;
			}
			exit(-1);
		}
		shmdt(vetor);
		shmctl(segmento, IPC_RMID, 0);
	}
	return 0;
}

-----------------------------------------------------
COMPILACAO E EXECUCAO
$ gcc Exerc3.c -o ex
$ ./ex
-----------------------------------------------------
RESULTADO
O 2 se encontra na posicao 2
O 2 se encontra na posicao 5

-----------------------------------------------------
CONCLUS�O
Neste programa conseguimos ver o paralelismo na memoria compartilhada. Ao acessar o mesmo vetor la presente ao mesmo tempo
conseguimos indentificar de forma simultanea os elementos la presentes. Assim conseguimos ver que eh possivel dois processos
distintos acessarem a mesma shared memory ao mesmo tempo. Neste casso cada processo acessou a memoria e procurou em 3 elementos
cada onde estava o inteiro "2" e entao retornaram aonde no vetor ele esta.
-----------------------------------------------------